SMARTCANE PROJECT STRUCTURE
============================

Total: 39 Swift Files

=====================================
🏗️ CORE APP ARCHITECTURE
=====================================

• SmartCaneApp (struct) - Main app entry point that initializes the SwiftUI application.
  📁 File: SmartCaneApp.swift

• MainTabView (struct) - Root tab view containing 4 main app sections (Home, Map, Detection, Settings).
  📁 File: MainTabView.swift

• Theme (enum) - Centralized color scheme and visual theme configuration for consistent branding.
  📁 File: Theme.swift

• AppKeys (enum) - UserDefaults key constants for app configuration and preferences.
  📁 File: AppKeys.swift

• ContentView (struct) - Legacy content view (may be deprecated).
  📁 File: ContentView.swift

=====================================
🗣️ VOICE & ACCESSIBILITY
=====================================

• SpeechManager (class) - Singleton class that handles text-to-speech functionality with user preference checking.
  📁 File: AVSpeechSynthesizer/SpeechManager.swift

• SpeechService (class) - Alternative simpler speech service that provides basic text-to-speech without user preference validation.
  📁 File: AVSpeechSynthesizer/SpeechService.swift

=====================================
🗺️ LOCATION & MAPPING
=====================================

• LocationManager (class) - CoreLocation wrapper that manages GPS tracking, permissions, and user location updates.
  📁 File: Map/LocationManager.swift

• MapView (struct) - Main map interface with search functionality, pin placement, and saved location display.
  📁 File: Map/MapView.swift

• SavedLocation (struct) - Data model for storing user-saved locations with GPS coordinates, names, addresses, and notes.
  📁 File: Home/SavedLocationsView.swift

=====================================
🤖 AI & OBJECT DETECTION
=====================================

• ObstacleClassifierManager (class) - Singleton that loads and manages CoreML model for obstacle detection.
  📁 File: Obstacle/ObstacleClassifierManager.swift

• SensorSignalProcessor (class) - Processes raw ESP32 Bluetooth signals and converts them into readable obstacle warnings.
  📁 File: Obstacle/SensorSignalProcessor.swift

• Obstacle (struct) - Data model for detected obstacles with GPS coordinates, type, and detection timestamp.
  📁 File: Obstacle/Obstacle.swift

• ObjectDetectionView (struct) - Main interface for camera/photo-based obstacle detection with classification results display.
  📁 File: Obstacle/ObjectDetectionView.swift

• WarningTestView (struct) - Integrated test interface that combines sensor signals with vision detection to generate unified warnings.
  📁 File: Obstacle/WarningTestView.swift

• AutoCameraCapture (class) - Automatic camera capture manager for background photo capture without user interaction.
  📁 File: Obstacle/AutoCameraCapture.swift

• PhotoPicker (struct) - UIViewControllerRepresentable wrapper for photo library access.
  📁 File: Obstacle/PhotoPicker.swift

• ObstacleClassifier.mlpackage - CoreML model package for obstacle classification with trained weights.
  📁 File: Obstacle/ObstacleClassifier.mlpackage/

=====================================
📡 BLUETOOTH & HARDWARE
=====================================

• ESP32BluetoothManager (class) - CoreBluetooth manager for real ESP32 device communication with service discovery and data handling.
  📁 File: Home/Setting/ESP32BluetoothManager.swift

• ESP32SmartCane (struct) - Data model representing ESP32 SmartCane devices with connection status and device information.
  📁 File: Home/Setting/ESP32BluetoothManager.swift

• BluetoothConnectionState (enum) - Connection state enumeration (disconnected, connecting, connected) for Bluetooth device status.
  📁 File: Home/Setting/ESP32BluetoothManager.swift

=====================================
🏠 HOME & NAVIGATION
=====================================

• HomeScreen (struct) - Main home interface with quick access buttons to all app features and voice feedback.
  📁 File: Home/HomeScreen.swift

• ProfileView (struct) - User profile interface with account information and app statistics.
  📁 File: Home/ProfileView.swift

• EditProfileView (struct) - Profile editing form for updating user information and preferences.
  📁 File: Home/EditProfileView.swift

• MyRoutesView (struct) - Interface for managing saved routes with search and organization features.
  📁 File: Home/MyRoutesView.swift

• SavedRoute (struct) - Data model for user-saved navigation routes with waypoints and metadata.
  📁 File: Home/MyRoutesView.swift

• RouteRowView (struct) - Individual route display component for the routes list interface.
  📁 File: Home/MyRoutesView.swift

• SavedLocationsView (struct) - Main interface for viewing, searching, and managing saved locations with real-time updates.
  📁 File: Home/SavedLocationsView.swift

• SavedLocationRow (struct) - Individual location display component with map navigation and deletion functionality.
  📁 File: Home/SavedLocationsView.swift

• AddLocationView (struct) - Form interface for adding new saved locations with GPS coordinates and notes.
  📁 File: Home/Setting/AddLocationView.swift

=====================================
⚙️ SETTINGS & CONFIGURATION
=====================================

• SettingsScreen (struct) - Central settings interface with device permissions, Bluetooth status, and app configuration options.
  📁 File: Home/Setting/SettingsScreen.swift

• NotificationSettingsView (struct) - Notification preferences and quiet hours configuration interface.
  📁 File: Home/Setting/NotificationSettingsView.swift

• PrivacySettingsView (struct) - Privacy controls and data usage information interface.
  📁 File: Home/Setting/PrivacySettingsView.swift

• AboutView (struct) - App information, features, and team details interface.
  📁 File: Home/Setting/AboutView.swift

• FeatureRow (struct) - Individual feature description component for about page.
  📁 File: Home/Setting/AboutView.swift

• TechRow (struct) - Technology stack information display component.
  📁 File: Home/Setting/AboutView.swift

=====================================
📊 DATA & NETWORKING
=====================================

• NetworkManager (class) - Basic networking manager with dummy JSON data for API simulation.
  📁 File: Networking/NetworkManager.swift

• NetworkDemoView (struct) - Demo interface for testing network functionality.
  📁 File: Networking/NetworkDemoView.swift

• Pipeline (class) - Main pipeline for handling incoming obstacle data and saving to Supabase.
  📁 File: Networking/Pipeline.swift

• AppError (enum) - Unified app error type for consistent error handling.
  📁 File: Networking/Pipeline.swift

• SmartCaneDataService (class) - Service for managing Supabase database operations.
  📁 File: Supabase/SmartCaneDataService.swift

• SupabaseClient (class) - Supabase client configuration and setup.
  📁 File: Supabase/SupabaseClient.swift

=====================================
🗄️ DATA MODELS
=====================================

• ObstacleLog (struct) - Data model for obstacle detection logs stored in Supabase.
  📁 File: Supabase/ObstacleLog.swift

• DeviceStatus (struct) - Device status model for ESP32 SmartCane device information.
  📁 File: Supabase/SmartCaneModels.swift

• ObstacleLogsView (struct) - View for displaying and managing obstacle logs from Supabase.
  📁 File: Supabase/ObstacleLogsView.swift

• ObstacleLogger (class) - Event logging system for obstacle detection with persistent storage.
  📁 File: Logging/ObstacleLogger.swift

• ObstacleEvent (struct) - Log event data model for obstacle detection tracking.
  📁 File: Logging/ObstacleLogger.swift

• ExportLogs (struct) - View for exporting obstacle logs to CSV format.
  📁 File: Logging/ExportLogs.swift

=====================================
🎥 LIVE & TESTING
=====================================

• LiveScreen (struct) - Live mode interface for real-time obstacle detection testing.
  📁 File: LiveScreen.swift

• PhotoPicker (struct) - Alternative photo picker implementation.
  📁 File: PhotoPicker.swift

=====================================
📡 nRF CONNECT APP SETUP
=====================================

1. Install nRF Connect app on Android device from Play Store

2. Configure the app:
   - Service UUID: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E
   - TX Characteristic: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E
   - RX Characteristic: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E

3. Message format to send:
   - Format: "F:20", "L:20", "R:20", "B:20" (F=front, L=left, R=right, B=back)
   - Example: "F:20" for front obstacle at 20cm

4. Connect iPhone to MacBook:
   - Connect iPhone to MacBook via USB cable
   - Open Xcode on MacBook
   - Run the SmartCane app on iPhone from Xcode
   - Check Xcode console to see printed messages when signals are received

5. Testing process:
   - Open nRF Connect app on Android
   - Connect Android to iPhone via Bluetooth
   - Send obstacle signals like "F:20", "L:30" from Android
   - Watch Xcode console on MacBook to see the printed messages