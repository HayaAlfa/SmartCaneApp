SMARTCANE PROJECT STRUCTURE SUMMARY
=====================================

Total Count: 62 Classes & Structs

=====================================
🏗️ CORE APP ARCHITECTURE (3)
=====================================

App Entry Point:
• SmartCaneApp (struct) - Main app entry point that initializes the SwiftUI application and sets MainTabView as the root view.
  📁 File: SmartCaneApp.swift

Navigation & UI Structure:
• MainTabView (struct) - Root tab view containing all 5 main app sections (Home, Map, Saved Locations, Object Detection, Profile).
  📁 File: MainTabView.swift

Theme & Configuration:
• Theme (enum) - Centralized color scheme and visual theme configuration for consistent branding throughout the app.
  📁 File: Theme.swift

=====================================
🗣️ VOICE & ACCESSIBILITY (2)
=====================================

Speech Management:
• SpeechManager (class) - Singleton class that handles text-to-speech functionality with user preference checking for accessibility features.
  📁 File: SpeechManager.swift

• SpeechService (class) - Alternative simpler speech service that provides basic text-to-speech without user preference validation.
  📁 File: SpeechService.swift

=====================================
🗺️ LOCATION & MAPPING (3)
=====================================

Location Services:
• LocationManager (class) - CoreLocation wrapper that manages GPS tracking, permissions, and user location updates with delegate pattern.
  📁 File: LocationManager.swift

Map Views:
• MapView (struct) - Main map interface with search functionality, pin placement, and saved location display using MapKit.
  📁 File: MapView.swift

• SavedLocation (struct) - Data model for storing user-saved locations with GPS coordinates, names, addresses, and notes.
  📁 File: SavedLocationsView.swift

=====================================
🤖 AI & OBJECT DETECTION (8)
=====================================

Core AI Components:
• ObstacleClassifierManager (class) - Singleton that loads and manages CoreML model for obstacle detection with Vision framework integration.
  📁 File: ObstacleClassifierManager.swift

• SensorSignal (class) - Processes raw ESP32 Bluetooth signals and converts them into readable obstacle warnings and directions.
  📁 File: SensorSignalProcessor.swift

• Obstacle (struct) - Data model for detected obstacles with GPS coordinates, type, and detection timestamp.
  📁 File: Obstacle.swift

Detection Views & Components:
• ObjectDetectionView (struct) - Main interface for camera/photo-based obstacle detection with classification results display.
  📁 File: ObjectDetectionView.swift

• DirectionTestView (struct) - Debug view for testing ESP32 signal parsing with manual input validation.
  📁 File: DirectionTestView.swift

• DetectionRecord (struct) - Data model for storing detection history with metadata and confidence scores.
  📁 File: ObjectDetectionView.swift

• DetectionRecordMetadata (struct) - Additional metadata structure for detection records with extended information.
  📁 File: ObjectDetectionView.swift

• CameraView (struct) - UIViewControllerRepresentable wrapper for native iOS camera integration.
  📁 File: ObjectDetectionView.swift

=====================================
📡 BLUETOOTH & HARDWARE (4)
=====================================

Bluetooth Management:
• ESP32BluetoothManager (class) - CoreBluetooth manager for real ESP32 device communication with service discovery and data handling.
  📁 File: ESP32BluetoothManager.swift

• ESP32SmartCane (struct) - Data model representing ESP32 SmartCane devices with connection status and device information.
  📁 File: ESP32BluetoothManager.swift

Bluetooth UI Components:
• BluetoothConnectionState (enum) - Connection state enumeration (disconnected, connecting, connected) for Bluetooth device status.
  📁 File: ESP32BluetoothManager.swift

• MockBluetoothDevice (struct) - Mock device model for testing Bluetooth connection UI with ESP32-specific properties.
  📁 File: SettingsScreen.swift

=====================================
🏠 HOME & NAVIGATION (8)
=====================================

Home Screen Components:
• HomeScreen (struct) - Main home interface with quick access buttons to all app features and voice feedback.
  📁 File: HomeScreen.swift

• HomeButton (struct) - Reusable button component for home screen navigation with consistent styling.
  📁 File: HomeScreen.swift

• HomeButtonView (struct) - Enhanced button view with icon and text for home screen feature access.
  📁 File: HomeScreen.swift

Routes & Navigation:
• MyRoutesView (struct) - Interface for managing saved routes with search and organization features.
  📁 File: MyRoutesView.swift

• SavedRoute (struct) - Data model for user-saved navigation routes with waypoints and metadata.
  📁 File: MyRoutesView.swift

• RouteRowView (struct) - Individual route display component for the routes list interface.
  📁 File: MyRoutesView.swift

• AddRouteView (struct) - Form interface for creating and saving new navigation routes.
  📁 File: MyRoutesView.swift

• SearchBar (struct) - Reusable search input component used across multiple views.
  📁 File: MyRoutesView.swift

=====================================
📍 LOCATION MANAGEMENT (4)
=====================================

Location Views:
• SavedLocationsView (struct) - Main interface for viewing, searching, and managing saved locations with real-time updates.
  📁 File: SavedLocationsView.swift

• SavedLocationRow (struct) - Individual location display component with map navigation and deletion functionality.
  📁 File: SavedLocationsView.swift

• AddLocationView (struct) - Form interface for adding new saved locations with GPS coordinates and notes.
  📁 File: AddLocationView.swift

• LocationMapView (struct) - Dedicated map view for location selection and preview functionality.
  📁 File: MapView.swift

=====================================
⚙️ SETTINGS & CONFIGURATION (15)
=====================================

Main Settings:
• SettingsScreen (struct) - Central settings interface with device permissions, Bluetooth status, and app configuration options.
  📁 File: SettingsScreen.swift

• BluetoothDeviceListView (struct) - Device selection interface for connecting to ESP32 SmartCane devices.
  📁 File: SettingsScreen.swift

• NotificationSettingsView (struct) - Notification preferences and quiet hours configuration interface.
  📁 File: NotificationSettingsView.swift

Privacy & Permissions:
• PrivacySettingsView (struct) - Privacy controls and data usage information interface.
  📁 File: PrivacySettingsView.swift

• DataUsageView (struct) - Data usage statistics and management interface.
  📁 File: PrivacySettingsView.swift

• DataUsageItem (struct) - Individual data usage item display component.
  📁 File: PrivacySettingsView.swift

• LocationPermissionsView (struct) - Location permission status and management interface.
  📁 File: PrivacySettingsView.swift

• CameraPermissionsView (struct) - Camera permission status and management interface.
  📁 File: PrivacySettingsView.swift

• BluetoothPermissionsView (struct) - Bluetooth permission status and management interface.
  📁 File: PrivacySettingsView.swift

Legal & About:
• PrivacyPolicyView (struct) - Privacy policy display interface with legal information.
  📁 File: PrivacySettingsView.swift

• TermsOfServiceView (struct) - Terms of service display interface with legal agreements.
  📁 File: PrivacySettingsView.swift

• AboutView (struct) - App information, features, and team details interface.
  📁 File: AboutView.swift

• FeatureRow (struct) - Individual feature description component for about page.
  📁 File: AboutView.swift

• TechRow (struct) - Technology stack information display component.
  📁 File: AboutView.swift

• TeamMemberRow (struct) - Team member information display component.
  📁 File: AboutView.swift

• ContactRow (struct) - Contact information display component.
  📁 File: AboutView.swift

• LegalRow (struct) - Legal information display component.
  📁 File: AboutView.swift

Sound Settings:
• QuietHoursView (struct) - Quiet hours configuration interface for notification scheduling.
  📁 File: NotificationSettingsView.swift

• SoundSettingsView (struct) - Sound and voice feedback configuration interface.
  📁 File: NotificationSettingsView.swift

=====================================
👤 USER PROFILE (2)
=====================================

Profile Management:
• ProfileView (struct) - User profile interface with account information and app statistics.
  📁 File: ProfileView.swift

• EditProfileView (struct) - Profile editing form for updating user information and preferences.
  📁 File: EditProfileView.swift

=====================================
🔧 UTILITIES & HELPERS (11)
=====================================

Network & Data:
• NetworkManager (class) - Basic networking manager with dummy JSON data for API simulation.
  📁 File: NetworkManager.swift

• ObstacleData (struct) - Network data model for obstacle information from API responses.
  📁 File: NetworkManager.swift

• UserData (struct) - Network data model for user information from API responses.
  📁 File: NetworkManager.swift

• NetworkDemoView (struct) - Demo interface for testing network functionality.
  📁 File: NetworkDemoView.swift

Logging & Events:
• ObstacleLogger (class) - Event logging system for obstacle detection with persistent storage.
  📁 File: ObstacleLogger.swift

• ObstacleEvent (struct) - Log event data model for obstacle detection tracking.
  📁 File: ObstacleLogger.swift

Configuration:
• AppKeys (enum) - UserDefaults key constants for app configuration and preferences.
  📁 File: AppKeys.swift

UI Components:
• PhotoPicker (struct) - UIViewControllerRepresentable wrapper for photo library access.
  📁 File: PhotoPicker.swift

• SimpleButtonStyle (struct) - Custom button styling for consistent UI appearance.
  📁 File: ObjectDetectionView.swift

• PrimaryButtonStyle (struct) - Primary action button styling for important UI elements.
  📁 File: MyRoutesView.swift

• DemoButtonStyle (struct) - Demo-specific button styling for testing interfaces.
  📁 File: NetworkDemoView.swift

=====================================
📊 PROJECT STATISTICS
=====================================

• Total Classes: 12 (Managers, Services, Loggers)
• Total Structs: 47 (Views, Data Models, UI Components)  
• Total Enums: 3 (Configuration, States, Themes)
• Lines of Code: ~3,000+ lines across all files
• Architecture: MVVM pattern with SwiftUI views and ObservableObject managers

=====================================
📁 FILE STRUCTURE SUMMARY
=====================================

Core App Files:
• SmartCaneApp.swift - Main app entry point
• MainTabView.swift - Tab navigation
• Theme.swift - App theming
• AppKeys.swift - Configuration keys

Voice & Accessibility:
• SpeechManager.swift - TTS manager
• SpeechService.swift - TTS service

Location & Mapping:
• LocationManager.swift - GPS manager
• MapView.swift - Map interface & location models

AI & Object Detection:
• ObstacleClassifierManager.swift - AI manager
• SensorSignalProcessor.swift - Signal processor
• ObjectDetectionView.swift - Detection UI & models
• DirectionTestView.swift - Debug interface
• Obstacle.swift - Obstacle data model
• PhotoPicker.swift - Camera picker

Bluetooth & Hardware:
• ESP32BluetoothManager.swift - Bluetooth manager & device models

Home & Navigation:
• HomeScreen.swift - Home interface & buttons
• SavedLocationsView.swift - Location management & models
• MyRoutesView.swift - Routes management & models
• ProfileView.swift - User profile
• EditProfileView.swift - Profile editing

Settings & Configuration:
• SettingsScreen.swift - Main settings & Bluetooth UI
• NotificationSettingsView.swift - Notifications & sound
• PrivacySettingsView.swift - Privacy & permissions
• AboutView.swift - App info & team
• AddLocationView.swift - Add location form

Utilities & Helpers:
• NetworkManager.swift - Network manager & data models
• NetworkDemoView.swift - Network demo & button styles
• ObstacleLogger.swift - Event logging & models

=====================================
This structure shows a well-organized accessibility-focused iOS app with comprehensive Bluetooth integration, AI-powered obstacle detection, and robust location management capabilities!
